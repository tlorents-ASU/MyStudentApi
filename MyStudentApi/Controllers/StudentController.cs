using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyStudentApi.Data;
using MyStudentApi.Models;
using System.Linq;
using System.Threading.Tasks;

namespace MyStudentApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StudentController : ControllerBase
    {
        private readonly AppDbContext _context;

        public StudentController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/Student/{id}
        [HttpGet("{id}")]
        public async Task<ActionResult<Student>> GetStudent(int id)
        {
            // Now, since id is an int and Student_ID is an int, the comparison works:
            var student = await _context.Students.FirstOrDefaultAsync(s => s.Student_ID == id);
            if (student == null)
            {
                return NotFound();
            }
            return student;
        }

        // POST: api/Student
        [HttpPost]
        public async Task<ActionResult<Student>> CreateStudent([FromBody] Student newStudent)
        {
            // Add the new student to the DbContext.
            _context.Students.Add(newStudent);

            // Save changes to the database. If Student_ID is an identity column,
            // it will be generated by the database.
            await _context.SaveChangesAsync();

            // Return a 201 Created response with the new student details.
            // The CreatedAtAction helper generates a Location header with the URL of the newly created resource.
            return CreatedAtAction(nameof(GetStudent), new { id = newStudent.Student_ID }, newStudent);
        }

        // PUT: api/Student/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateStudent(int id, [FromBody] Student updatedStudent)
        {
            if (id != updatedStudent.Student_ID)
            {
                return BadRequest("Student ID mismatch.");
            }

            _context.Entry(updatedStudent).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Students.Any(s => s.Student_ID == id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }
    }
}



//using System.Linq;
//using System.Threading.Tasks;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;
//using MyStudentApi.Data;
//using MyStudentApi.Models;

//namespace MyStudentApi.Controllers
//{
//    [Route("api/[controller]")]
//    [ApiController]
//    public class StudentController : ControllerBase
//    {
//        private readonly AppDbContext _context;

//        public StudentController(AppDbContext context)
//        {
//            _context = context;
//        }

//        // GET: api/Student/{id}
//        [HttpGet("{id}")]
//        public async Task<IActionResult> GetStudent(int id)
//        {
//            var student = await _context.Students
//                .FirstOrDefaultAsync(s => s.Student_ID == id);

//            if (student == null)
//            {
//                return NotFound(new { error = "Student not found" });
//            }

//            return Ok(student);
//        }

//        // POST: api/Student
//        [HttpPost]
//        public async Task<IActionResult> CreateStudent([FromBody] Student student)
//        {
//            if (student == null)
//            {
//                return BadRequest();
//            }

//            _context.Students.Add(student);
//            await _context.SaveChangesAsync();

//            // Return the new student's Student_ID (an int) in the route values.
//            return CreatedAtAction(nameof(GetStudent), new { id = student.Student_ID }, student);
//        }

//        // PUT: api/Student/{id}
//        [HttpPut("{id}")]
//        public async Task<IActionResult> UpdateStudent(int id, [FromBody] Student updatedStudent)
//        {
//            if (id != updatedStudent.Student_ID)
//            {
//                return BadRequest("Student ID mismatch.");
//            }

//            _context.Entry(updatedStudent).State = EntityState.Modified;

//            try
//            {
//                await _context.SaveChangesAsync();
//            }
//            catch (DbUpdateConcurrencyException)
//            {
//                if (!_context.Students.Any(s => s.Student_ID == id))
//                {
//                    return NotFound(new { error = "Student not found" });
//                }
//                else
//                {
//                    throw;
//                }
//            }

//            return NoContent();
//        }

//        // DELETE: api/Student/{id}
//        [HttpDelete("{id}")]
//        public async Task<IActionResult> DeleteStudent(int id)
//        {
//            var student = await _context.Students
//                .FirstOrDefaultAsync(s => s.Student_ID == id);

//            if (student == null)
//            {
//                return NotFound(new { error = "Student not found" });
//            }

//            _context.Students.Remove(student);
//            await _context.SaveChangesAsync();

//            return NoContent();
//        }

//        private bool StudentExists(int id)
//        {
//            return _context.Students.Any(e => e.Student_ID == id);
//        }
//    }
//}
